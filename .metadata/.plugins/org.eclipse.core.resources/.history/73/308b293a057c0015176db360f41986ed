// automatically generated by Xtext
grammar org.xtext.StateMachine.sm.SM with org.eclipse.xtext.common.Terminals

import "platform:/resource/StateMachine/metaModels/StateMachine.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

StateMachine returns StateMachine:
	'StateMachine'
	name=EString
	'{'
		(variables+= Variable)*
		'events' '{'( events+= Event)(',' events+= Event)*'}'
		(states+= State)+
		'init with' initialState=InitialState
		(transitions+=Transition)+
	'}';


State returns State:
	State_Impl | StateMachine | CompositeState_Impl;




Variable returns Variable:
	'var' (BooleanVariable | IntegerVariable);



ExpressionElement returns ExpressionElement:
	Expression | BooleanData | IntegerData | VariableReference;

Data returns Data:
	BooleanData | IntegerData;

EString returns ecore::EString:
	STRING | ID;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Operation returns Operation:
	{Operation}
	('{' contents+=Assignment ( ";" contents+=Assignment)* '}' )?;

State_Impl returns State:
	'state'
	name=EString
	'{'
		('do' operation=Operation)?
	'}';

InitialState returns InitialState:
	referencedState=[State|EString];

Transition returns Transition:
		'from' source=[State|EString]
		'to' target=[State|EString]
		'for' event=[Event|EString]
		('guard' guard=Expression)?;

Event returns Event:
	{Event}
	name=STRING;

Assignment returns Assignment:
	variable=[Variable|EString] ':=' expression=ExpressionElement;

Expression returns Expression:
	'guard' 'left' left=ExpressionElement
		'op' operator=Operator
		'right' right=ExpressionElement;

BooleanData returns BooleanData:
	value=EBoolean;

IntegerData returns IntegerData:
	value=EInt;

VariableReference returns VariableReference:
	variable=[Variable|EString];

enum Operator returns Operator:
				add = 'add' | sub = 'sub' | eq = 'eq' | mul = 'mul' | gt = 'gt' | lt = 'lt' | lte = 'lte' | gte = 'gte' | div = 'div' | and = 'and' | neq = 'neq' | or = 'or' | not = 'not';

EInt returns ecore::EInt:
	'-'? INT;

CompositeState_Impl returns CompositeState:
	'state'
	name=EString
	'{'
		(states+=State)+
		('do' operation=Operation)?
		'init with' initialState=InitialState
	'}';

BooleanVariable returns BooleanVariable:
	{BooleanVariable}
	name=EString
	':'
	'boolean'
	(':=' value=BooleanData)?;

IntegerVariable returns IntegerVariable:
	{IntegerVariable}
	name=EString
	':'
	'integer'
	(':=' value=IntegerData)?;
