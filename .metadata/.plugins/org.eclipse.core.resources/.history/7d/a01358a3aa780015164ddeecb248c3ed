/* $Id:$ 
 * Creation : October 19, 2015
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            berger
 */
@mainClass "transfos::Main"
@mainOperation "main"


package transfos;

require kermeta
require "platform:/resource/StateMachine/metaModels/StateMachine.ecore"
require "platform:/resource/StateMachine/transfos/WriteFile.kmt"
require "platform:/resource/StateMachine/transfos/ManageStateMachine.kmt"

using kermeta::io 
using kermeta::standard
using kermeta::persistence
using SimplStateMachine

class Main
{
	attribute _file : WriteFile
	attribute _class : WriteFile
	attribute _manager : ManageStateMachine
    
    operation loadModel(fileName : String) : StateMachine is do
		var repository : EMFRepository init EMFRepository.new
 		var resource : EMFResource 
 		resource ?= repository.createResource(fileName, "platform:/resource/StateMachine/metaModels/StateMachine.ecore")

		resource.load
		var sm : StateMachine
		sm ?= resource.one
		
		result := sm
	end
	
	operation createClass() is do
		if(_manager.haveVariables()) then
			_class := WriteFile.new.initialize("platform:/resource/StateMachine/src/" + _manager.getNameSM() + ".java")
			_class.write("public class "+_manager.getNameSM()+"{")
			_manager.getVariable().each{v|
				_class.writeIndent(1,"private "+_manager.getTypeVariable(v)+ " " + v.name+";")
			}
			_class.writeIndent(1,"public "+_manager.getNameSM()+ "(){;")
			_manager.getVariable().each{v|
				if(_manager.getTypeVariable(v)=="boolean") then
					_class.writeIndent(1,v.name+" = false;")
				end
				if(_manager.getTypeVariable(v)=="int") then
					_class.writeIndent(1,v.name+" = 0;")
				end
			}
			_class.writeIndent(1,"}")
			_manager.getVariable().each{v|
				_class.writelnIndent(1,"public  "+_manager.getTypeVariable(v)+ " get" + v.name+"(){")
				_class.writeIndent(2,"return "+ v.name+";")
				_class.writeIndent(1,"}")
				_class.writelnIndent(1,"public void set" + v.name+"("+_manager.getTypeVariable(v)+" v){")
				_class.writeIndent(2,v.name+" = v;")
				_class.writeIndent(1,"}")
			}
			_class.write("}")
		end
	end
	
	/* creation du fichier java */
	operation createJavaFile(fileName : String) is do
	stdio.writeln(_manager.getNameSM())
		_file := WriteFile.new.initialize("platform:/resource/StateMachine/src/" + _manager.getNameSM() + "Java.java")

		_file.write("import com.pauware.pauware_engine._Core.*;\n"+
					"import com.pauware.pauware_engine._Exception.*;\n"+
					"import com.pauware.pauware_engine._Java_EE.*;\n"+
					"import java.util.Scanner;")
		_file.write("\n"+ "public class "+_file.getNameFile()+" {\n" )

		_file.writeIndent(1,"AbstractStatechart_monitor _"+_manager.getNameSM()+";" )
		declarationState()
		
		init_structure()
		
		init_behavior()
		
		start()
		
		stop()
		
		construct()
		
		declarationActivity()
		declarationGuard()
		declarationEvent()
		
		mainMethod()
		
		_file.writeln("}")
	end

	/* d√©claration des variables locales */
    operation declarationState() is do
    	var variable : Sequence<String> init _manager.getAllNameState()
    	variable.each{ stateName | _file.writeIndent(1,"AbstractStatechart _"+stateName+";")}
    end
	
	/* fonction init_structure vide */
	operation init_structure() is do
		_file.writelnIndent(1,"private void init_structure() throws Statechart_exception {" )
		_file.writeIndent(2,"// votre code d'initialisation de structure" )
		_file.writeIndent(1,"}" )
	end
	
	operation init_behavior() is do
		_file.writelnIndent(1,"private void init_behavior() throws Statechart_exception {")
		var mesEtats : OrderedSet<State> init OrderedSet<State>.new
		var mesEtatsComposite : OrderedSet<State> init OrderedSet<State>.new
		mesEtats := _manager.getAllState()
		mesEtats.each{etat |
			if(CompositeState.isInstance(etat)) then
				mesEtatsComposite.add(etat)
			else
				_file.writelnIndent(2,"_"+etat.name+" = new Statechart(\""+etat.name+"\");")
			end
			if(_manager.haveActivityState(etat)) then 
				_file.writeIndent(2,"_"+etat.name+".doActivity(this, \""+_manager.getNameActivityState(etat)+"\");")
			end
		}
		_file.writelnIndent(2,"_"+_manager.getNameInitialState()+".inputState();")
		mesEtatsComposite.each{etat |
			var compState : CompositeState
    		compState ?= etat
    		_file.writelnIndent(2,"_"+etat.name+" = ("+createXorString(compState)+").name(\""+etat.name+"\");")
			_file.writeIndent(2,"_"+_manager.getNameInput(etat)+".inputState();")
		}
		_file.writelnIndent(2,"_"+_manager.getNameSM()+" = new Statechart_monitor("+createXorString(_manager.getSM())+", \""+_manager.getNameSM()+"\", AbstractStatechart_monitor.Show_on_system_out, null);")
		_file.writeIndent(1,"}")
	end
	operation createXorString(s : CompositeState) : String is do
		var monitor : String init ""
		s.states.each{st |monitor:= monitor + "(_"+st.name+".xor"}
		monitor := monitor.substring(1,monitor.size)
		monitor := monitor.substring(0,monitor.size-4)
		s.states.each{s |monitor:= monitor + ")"}
		monitor := monitor.substring(0,monitor.size-1)
		result := monitor
	end

	operation start() is do
		_file.writelnIndent(1,"public void start() throws Statechart_transition_based_exception, Statechart_exception{" )
		var seqTrans : OrderedSet<Transition> init _manager.getAllTransition()
		seqTrans.each{t | 
			if(_manager.haveGuard(t)) then
				var nomGarde : String init _manager.assignNameGuard(t.guard,"")
				_file.writeIndent(2,"_"+_manager.getNameSM()+".fires(\""+t.event.name+"\", _"+t.source.name+" , _"+t.target.name+", this, \""+nomGarde+"\");")
			else
				_file.writeIndent(2,"_"+_manager.getNameSM()+".fires(\""+t.event.name+"\", _"+t.source.name+" , _"+t.target.name+");")
			end	
		}
		_file.writeIndent(2,"_"+_manager.getNameSM()+".start();")
		_file.writeIndent(1,"}" )
	end
	operation stop() is do
		_file.writelnIndent(1,"public void stop() throws Statechart_exception {")
		_file.writeIndent(2,"_"+_manager.getNameSM()+".stop();")
		_file.writeIndent(1,"}" )
	end
    operation construct() is do
    	_file.writelnIndent(1,"public "+_file.getNameFile()+"() throws Statechart_exception {")
    	_file.writeIndent(2,"init_structure();")
    	_file.writeIndent(2,"init_behavior();")
    	_file.writeIndent(1,"}" )
    	
    end
    
    operation declarationActivity() is do
    	_manager.getAllState().each{ s |
    		if(_manager.getNameActivityState(s)!="") then
    			_file.writelnIndent(1,"public void "+_manager.getNameActivityState(s)+"(){")
    			_file.writeIndent(2,"//Code de l'activite ici")
    			_file.writeIndent(1,"}" )
    		end
    	}
    end
    operation declarationGuard() is do
    	_manager.getNameGuard().each{ g |
    		_file.writelnIndent(1,"public boolean "+g+"(){")
    		_file.writeIndent(2,"return true; //Code de la garde")
    		_file.writeIndent(1,"}" )
    	}
    end
    operation declarationEvent() is do
    	_manager.getNameEvent().each{ g |
    		_file.writelnIndent(1,"public void evt_"+g+"() throws Statechart_exception {")
    		_file.writeIndent(2,"_"+_manager.getNameSM()+".run_to_completion(\""+g+"\");")
    		_file.writeIndent(1,"}" )
    	}    
    end
    
    operation mainMethod() is do
    	_file.writelnIndent(1,"public static void main(){")
    	_file.writeIndent(2,"try{")
    	_file.writeIndent(3,_file.getNameFile()+" st = new "+_file.getNameFile()+"();")
    	_file.writeIndent(3,"st.start();")
    	_file.writeIndent(2,"} catch (Throwable t) {")
    	_file.writeIndent(3,"t.printStackTrace();")
    	_file.writeIndent(2,"}")
    	_file.writeIndent(1,"}" )
    end
    
    
    
    
    
	operation main() : Void is do 
		var fileName : String init "platform:/resource/StateMachine"
		var dirName : String
		var modelName : String
		
		dirName := stdio.read("Directory of the model? [default=models] ")
		if (dirName == "") then dirName := "models" end	
		modelName := "Voiture.xmi"//stdio.read("Name of the model file? ")
		fileName := fileName + "/" + dirName + "/" + modelName
		_manager := ManageStateMachine.new.initialize(loadModel(fileName))
		stdio.writeln("\n === State machine loaded ===\n")
		createClass()
		createJavaFile(fileName)
		
	end
}