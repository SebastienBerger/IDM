/* $Id:$ 
 * Creation : October 21, 2015
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            berger
 */


package transfos;


require kermeta
require "platform:/resource/StateMachine/metaModels/StateMachine.ecore"

using kermeta::standard
using kermeta::io 
using SimplStateMachine

class ManageStateMachine
{
	attribute _sm : StateMachine
	attribute _states : OrderedSet<State>
	
	operation initialize(sm : StateMachine) : ManageStateMachine is do 
		_sm := sm
		_states := OrderedSet<State>.new
		_sm.states.each{s | recoverAllState(s)}
		
		var tmpState : Sequence<String> init Sequence<String>.new
		_states.each{s | tmpState.add(s.name)}
		var i : Integer init 0
		_states.each{s |	
			if(tmpState.size() >0) then
				tmpState.removeAt(0)
			end
			if(tmpState.contains(s.name)) then
				i := i + 1
				s.name := s.name + i.toString
			end
		}
		result := self
	end
	operation getAllNameState() : Sequence<String> is do
		var tmpStateName : Sequence<String> init Sequence<String>.new
		_states.each{s | tmpStateName.add(s.name)}
		result := tmpStateName
	end
	operation recoverAllState(s : State) is do
    	_states.add(s)
    	if(CompositeState.isInstance(s)) then
    		stdio.writeln(s.name+" est un composite")
    		var compState : CompositeState
    		compState ?=s
    		compState.states.each{state|
    			if(CompositeState.isInstance(state)) then
    				recoverAllState(state)
    			else
    				_states.add(state)
				end
    		}
		end
    end
    
	operation getNameSM() : String is do
		result := _sm.name
	end
	
	
	operation getAllStateRename() : State is do
		var s : State
		var sstates : Sequence<String> init Sequence<String>.new
		result := s
	end
}