/*
 * generated by Xtext
 */
package org.xtext.StateMachine.sm.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.StateMachine.sm.services.SMGrammarAccess;

public class SMParser extends AbstractContentAssistParser {
	
	@Inject
	private SMGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.StateMachine.sm.ui.contentassist.antlr.internal.InternalSMParser createParser() {
		org.xtext.StateMachine.sm.ui.contentassist.antlr.internal.InternalSMParser result = new org.xtext.StateMachine.sm.ui.contentassist.antlr.internal.InternalSMParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStateAccess().getAlternatives(), "rule__State__Alternatives");
					put(grammarAccess.getVariableAccess().getAlternatives_1(), "rule__Variable__Alternatives_1");
					put(grammarAccess.getExpressionElementAccess().getAlternatives(), "rule__ExpressionElement__Alternatives");
					put(grammarAccess.getDataAccess().getAlternatives(), "rule__Data__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getStateMachineAccess().getGroup(), "rule__StateMachine__Group__0");
					put(grammarAccess.getStateMachineAccess().getGroup_8(), "rule__StateMachine__Group_8__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
					put(grammarAccess.getOperationAccess().getGroup_3(), "rule__Operation__Group_3__0");
					put(grammarAccess.getOperationAccess().getGroup_3_3(), "rule__Operation__Group_3_3__0");
					put(grammarAccess.getState_ImplAccess().getGroup(), "rule__State_Impl__Group__0");
					put(grammarAccess.getState_ImplAccess().getGroup_4(), "rule__State_Impl__Group_4__0");
					put(grammarAccess.getInitialStateAccess().getGroup(), "rule__InitialState__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_8(), "rule__Transition__Group_8__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup_2(), "rule__Assignment__Group_2__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_4(), "rule__Expression__Group_4__0");
					put(grammarAccess.getVariableReferenceAccess().getGroup(), "rule__VariableReference__Group__0");
					put(grammarAccess.getVariableReferenceAccess().getGroup_2(), "rule__VariableReference__Group_2__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getCompositeState_ImplAccess().getGroup(), "rule__CompositeState_Impl__Group__0");
					put(grammarAccess.getCompositeState_ImplAccess().getGroup_4(), "rule__CompositeState_Impl__Group_4__0");
					put(grammarAccess.getCompositeState_ImplAccess().getGroup_8(), "rule__CompositeState_Impl__Group_8__0");
					put(grammarAccess.getBooleanVariableAccess().getGroup(), "rule__BooleanVariable__Group__0");
					put(grammarAccess.getBooleanVariableAccess().getGroup_4(), "rule__BooleanVariable__Group_4__0");
					put(grammarAccess.getIntegerVariableAccess().getGroup(), "rule__IntegerVariable__Group__0");
					put(grammarAccess.getIntegerVariableAccess().getGroup_4(), "rule__IntegerVariable__Group_4__0");
					put(grammarAccess.getStateMachineAccess().getIsActiveAssignment_0(), "rule__StateMachine__IsActiveAssignment_0");
					put(grammarAccess.getStateMachineAccess().getNameAssignment_2(), "rule__StateMachine__NameAssignment_2");
					put(grammarAccess.getStateMachineAccess().getVariablesAssignment_4(), "rule__StateMachine__VariablesAssignment_4");
					put(grammarAccess.getStateMachineAccess().getEventsAssignment_7(), "rule__StateMachine__EventsAssignment_7");
					put(grammarAccess.getStateMachineAccess().getEventsAssignment_8_1(), "rule__StateMachine__EventsAssignment_8_1");
					put(grammarAccess.getOperationAccess().getContentsAssignment_3_2(), "rule__Operation__ContentsAssignment_3_2");
					put(grammarAccess.getOperationAccess().getContentsAssignment_3_3_1(), "rule__Operation__ContentsAssignment_3_3_1");
					put(grammarAccess.getState_ImplAccess().getIsActiveAssignment_0(), "rule__State_Impl__IsActiveAssignment_0");
					put(grammarAccess.getState_ImplAccess().getNameAssignment_2(), "rule__State_Impl__NameAssignment_2");
					put(grammarAccess.getState_ImplAccess().getOperationAssignment_4_1(), "rule__State_Impl__OperationAssignment_4_1");
					put(grammarAccess.getInitialStateAccess().getReferencedStateAssignment_3(), "rule__InitialState__ReferencedStateAssignment_3");
					put(grammarAccess.getTransitionAccess().getSourceAssignment_3(), "rule__Transition__SourceAssignment_3");
					put(grammarAccess.getTransitionAccess().getTargetAssignment_5(), "rule__Transition__TargetAssignment_5");
					put(grammarAccess.getTransitionAccess().getEventAssignment_7(), "rule__Transition__EventAssignment_7");
					put(grammarAccess.getTransitionAccess().getGuardAssignment_8_1(), "rule__Transition__GuardAssignment_8_1");
					put(grammarAccess.getEventAccess().getNameAssignment_1(), "rule__Event__NameAssignment_1");
					put(grammarAccess.getAssignmentAccess().get_nameAssignment_2_1(), "rule__Assignment___nameAssignment_2_1");
					put(grammarAccess.getAssignmentAccess().getVariableAssignment_4(), "rule__Assignment__VariableAssignment_4");
					put(grammarAccess.getAssignmentAccess().getExpressionAssignment_6(), "rule__Assignment__ExpressionAssignment_6");
					put(grammarAccess.getExpressionAccess().getOperatorAssignment_3(), "rule__Expression__OperatorAssignment_3");
					put(grammarAccess.getExpressionAccess().get_nameAssignment_4_1(), "rule__Expression___nameAssignment_4_1");
					put(grammarAccess.getExpressionAccess().getLeftAssignment_6(), "rule__Expression__LeftAssignment_6");
					put(grammarAccess.getExpressionAccess().getRightAssignment_8(), "rule__Expression__RightAssignment_8");
					put(grammarAccess.getBooleanDataAccess().getValueAssignment(), "rule__BooleanData__ValueAssignment");
					put(grammarAccess.getIntegerDataAccess().getValueAssignment(), "rule__IntegerData__ValueAssignment");
					put(grammarAccess.getVariableReferenceAccess().get_nameAssignment_2_1(), "rule__VariableReference___nameAssignment_2_1");
					put(grammarAccess.getVariableReferenceAccess().getVariableAssignment_4(), "rule__VariableReference__VariableAssignment_4");
					put(grammarAccess.getCompositeState_ImplAccess().getIsActiveAssignment_0(), "rule__CompositeState_Impl__IsActiveAssignment_0");
					put(grammarAccess.getCompositeState_ImplAccess().getNameAssignment_2(), "rule__CompositeState_Impl__NameAssignment_2");
					put(grammarAccess.getCompositeState_ImplAccess().getOperationAssignment_4_1(), "rule__CompositeState_Impl__OperationAssignment_4_1");
					put(grammarAccess.getCompositeState_ImplAccess().getStatesAssignment_7(), "rule__CompositeState_Impl__StatesAssignment_7");
					put(grammarAccess.getCompositeState_ImplAccess().getStatesAssignment_8_1(), "rule__CompositeState_Impl__StatesAssignment_8_1");
					put(grammarAccess.getCompositeState_ImplAccess().getInitialStateAssignment_11(), "rule__CompositeState_Impl__InitialStateAssignment_11");
					put(grammarAccess.getBooleanVariableAccess().getNameAssignment_1(), "rule__BooleanVariable__NameAssignment_1");
					put(grammarAccess.getBooleanVariableAccess().getValueAssignment_4_1(), "rule__BooleanVariable__ValueAssignment_4_1");
					put(grammarAccess.getIntegerVariableAccess().getNameAssignment_1(), "rule__IntegerVariable__NameAssignment_1");
					put(grammarAccess.getIntegerVariableAccess().getValueAssignment_4_1(), "rule__IntegerVariable__ValueAssignment_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.StateMachine.sm.ui.contentassist.antlr.internal.InternalSMParser typedParser = (org.xtext.StateMachine.sm.ui.contentassist.antlr.internal.InternalSMParser) parser;
			typedParser.entryRuleStateMachine();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SMGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SMGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
