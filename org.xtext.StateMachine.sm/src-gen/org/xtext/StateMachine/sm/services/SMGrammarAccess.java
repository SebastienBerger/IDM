/*
 * generated by Xtext
 */
package org.xtext.StateMachine.sm.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SMGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesVariableParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Keyword cEventsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEventsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEventsEventParserRuleCall_6_0 = (RuleCall)cEventsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cEventsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_7_1_0 = (RuleCall)cEventsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStatesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatesStateParserRuleCall_9_0 = (RuleCall)cStatesAssignment_9.eContents().get(0);
		private final Keyword cInitWithKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cInitialStateAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cInitialStateInitialStateParserRuleCall_11_0 = (RuleCall)cInitialStateAssignment_11.eContents().get(0);
		private final Assignment cTransitionsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cTransitionsTransitionParserRuleCall_12_0 = (RuleCall)cTransitionsAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//StateMachine:
		//	"StateMachine" name=EString "{" variables+=Variable* "events" "{" events+=Event ("," events+=Event)* "}"
		//	states+=State+ "init with" initialState=InitialState transitions+=Transition+ / *('operation' operation=Operation)?
		//		'states' '{' states+=State ( "," states+=State)* '}' 
		//		'initialState' initialState=InitialState
		//		'transitions' '{' transitions+=Transition ( "," transitions+=Transition)* '}' 
		//		'events' '{' events+=Event ( "," events+=Event)* '}' 
		//		('variables' '{' variables+=Variable ( "," variables+=Variable)* '}' )?* / "}";
		@Override public ParserRule getRule() { return rule; }

		//"StateMachine" name=EString "{" variables+=Variable* "events" "{" events+=Event ("," events+=Event)* "}" states+=State+
		//"init with" initialState=InitialState transitions+=Transition+ / *('operation' operation=Operation)?
		//		'states' '{' states+=State ( "," states+=State)* '}' 
		//		'initialState' initialState=InitialState
		//		'transitions' '{' transitions+=Transition ( "," transitions+=Transition)* '}' 
		//		'events' '{' events+=Event ( "," events+=Event)* '}' 
		//		('variables' '{' variables+=Variable ( "," variables+=Variable)* '}' )?* / "}"
		public Group getGroup() { return cGroup; }

		//"StateMachine"
		public Keyword getStateMachineKeyword_0() { return cStateMachineKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_3_0() { return cVariablesVariableParserRuleCall_3_0; }

		//"events"
		public Keyword getEventsKeyword_4() { return cEventsKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//events+=Event
		public Assignment getEventsAssignment_6() { return cEventsAssignment_6; }

		//Event
		public RuleCall getEventsEventParserRuleCall_6_0() { return cEventsEventParserRuleCall_6_0; }

		//("," events+=Event)*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//events+=Event
		public Assignment getEventsAssignment_7_1() { return cEventsAssignment_7_1; }

		//Event
		public RuleCall getEventsEventParserRuleCall_7_1_0() { return cEventsEventParserRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }

		//states+=State+
		public Assignment getStatesAssignment_9() { return cStatesAssignment_9; }

		//State
		public RuleCall getStatesStateParserRuleCall_9_0() { return cStatesStateParserRuleCall_9_0; }

		//"init with"
		public Keyword getInitWithKeyword_10() { return cInitWithKeyword_10; }

		//initialState=InitialState
		public Assignment getInitialStateAssignment_11() { return cInitialStateAssignment_11; }

		//InitialState
		public RuleCall getInitialStateInitialStateParserRuleCall_11_0() { return cInitialStateInitialStateParserRuleCall_11_0; }

		//transitions+=Transition+
		public Assignment getTransitionsAssignment_12() { return cTransitionsAssignment_12; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_12_0() { return cTransitionsTransitionParserRuleCall_12_0; }

		/// *('operation' operation=Operation)?
		//		'states' '{' states+=State ( "," states+=State)* '}' 
		//		'initialState' initialState=InitialState
		//		'transitions' '{' transitions+=Transition ( "," transitions+=Transition)* '}' 
		//		'events' '{' events+=Event ( "," events+=Event)* '}' 
		//		('variables' '{' variables+=Variable ( "," variables+=Variable)* '}' )?* / "}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cState_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateMachineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompositeState_ImplParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//State:
		//	State_Impl | StateMachine | CompositeState_Impl;
		@Override public ParserRule getRule() { return rule; }

		//State_Impl | StateMachine | CompositeState_Impl
		public Alternatives getAlternatives() { return cAlternatives; }

		//State_Impl
		public RuleCall getState_ImplParserRuleCall_0() { return cState_ImplParserRuleCall_0; }

		//StateMachine
		public RuleCall getStateMachineParserRuleCall_1() { return cStateMachineParserRuleCall_1; }

		//CompositeState_Impl
		public RuleCall getCompositeState_ImplParserRuleCall_2() { return cCompositeState_ImplParserRuleCall_2; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cBooleanVariableParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cIntegerVariableParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Variable:
		//	"var" (BooleanVariable | IntegerVariable);
		@Override public ParserRule getRule() { return rule; }

		//"var" (BooleanVariable | IntegerVariable)
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//BooleanVariable | IntegerVariable
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//BooleanVariable
		public RuleCall getBooleanVariableParserRuleCall_1_0() { return cBooleanVariableParserRuleCall_1_0; }

		//IntegerVariable
		public RuleCall getIntegerVariableParserRuleCall_1_1() { return cIntegerVariableParserRuleCall_1_1; }
	}

	public class ExpressionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanDataParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerDataParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ExpressionElement:
		//	Expression | BooleanData | IntegerData | VariableReference;
		@Override public ParserRule getRule() { return rule; }

		//Expression | BooleanData | IntegerData | VariableReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//BooleanData
		public RuleCall getBooleanDataParserRuleCall_1() { return cBooleanDataParserRuleCall_1; }

		//IntegerData
		public RuleCall getIntegerDataParserRuleCall_2() { return cIntegerDataParserRuleCall_2; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_3() { return cVariableReferenceParserRuleCall_3; }
	}

	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Data");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanDataParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerDataParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Data:
		//	BooleanData | IntegerData;
		@Override public ParserRule getRule() { return rule; }

		//BooleanData | IntegerData
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanData
		public RuleCall getBooleanDataParserRuleCall_0() { return cBooleanDataParserRuleCall_0; }

		//IntegerData
		public RuleCall getIntegerDataParserRuleCall_1() { return cIntegerDataParserRuleCall_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cContentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContentsAssignmentParserRuleCall_1_1_0 = (RuleCall)cContentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cContentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cContentsAssignmentParserRuleCall_1_2_1_0 = (RuleCall)cContentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Operation:
		//	{Operation} ("{" contents+=Assignment (";" contents+=Assignment)* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//{Operation} ("{" contents+=Assignment (";" contents+=Assignment)* "}")?
		public Group getGroup() { return cGroup; }

		//{Operation}
		public Action getOperationAction_0() { return cOperationAction_0; }

		//("{" contents+=Assignment (";" contents+=Assignment)* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//contents+=Assignment
		public Assignment getContentsAssignment_1_1() { return cContentsAssignment_1_1; }

		//Assignment
		public RuleCall getContentsAssignmentParserRuleCall_1_1_0() { return cContentsAssignmentParserRuleCall_1_1_0; }

		//(";" contents+=Assignment)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//";"
		public Keyword getSemicolonKeyword_1_2_0() { return cSemicolonKeyword_1_2_0; }

		//contents+=Assignment
		public Assignment getContentsAssignment_1_2_1() { return cContentsAssignment_1_2_1; }

		//Assignment
		public RuleCall getContentsAssignmentParserRuleCall_1_2_1_0() { return cContentsAssignmentParserRuleCall_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class State_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOperationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperationOperationParserRuleCall_3_1_0 = (RuleCall)cOperationAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//State_Impl returns State:
		//	"state" name=EString "{" ("do" operation=Operation)? "}";
		@Override public ParserRule getRule() { return rule; }

		//"state" name=EString "{" ("do" operation=Operation)? "}"
		public Group getGroup() { return cGroup; }

		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("do" operation=Operation)?
		public Group getGroup_3() { return cGroup_3; }

		//"do"
		public Keyword getDoKeyword_3_0() { return cDoKeyword_3_0; }

		//operation=Operation
		public Assignment getOperationAssignment_3_1() { return cOperationAssignment_3_1; }

		//Operation
		public RuleCall getOperationOperationParserRuleCall_3_1_0() { return cOperationOperationParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InitialStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitialState");
		private final Assignment cReferencedStateAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferencedStateStateCrossReference_0 = (CrossReference)cReferencedStateAssignment.eContents().get(0);
		private final RuleCall cReferencedStateStateEStringParserRuleCall_0_1 = (RuleCall)cReferencedStateStateCrossReference_0.eContents().get(1);
		
		//InitialState:
		//	referencedState=[State|EString];
		@Override public ParserRule getRule() { return rule; }

		//referencedState=[State|EString]
		public Assignment getReferencedStateAssignment() { return cReferencedStateAssignment; }

		//[State|EString]
		public CrossReference getReferencedStateStateCrossReference_0() { return cReferencedStateStateCrossReference_0; }

		//EString
		public RuleCall getReferencedStateStateEStringParserRuleCall_0_1() { return cReferencedStateStateEStringParserRuleCall_0_1; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceStateCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceStateEStringParserRuleCall_1_0_1 = (RuleCall)cSourceStateCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetStateCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetStateEStringParserRuleCall_3_0_1 = (RuleCall)cTargetStateCrossReference_3_0.eContents().get(1);
		private final Keyword cForKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEventAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cEventEventCrossReference_5_0 = (CrossReference)cEventAssignment_5.eContents().get(0);
		private final RuleCall cEventEventEStringParserRuleCall_5_0_1 = (RuleCall)cEventEventCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cGuardKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cGuardAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_6_1_0 = (RuleCall)cGuardAssignment_6_1.eContents().get(0);
		
		//Transition:
		//	"from" source=[State|EString] "to" target=[State|EString] "for" event=[Event|EString] ("guard" guard=Expression)?;
		@Override public ParserRule getRule() { return rule; }

		//"from" source=[State|EString] "to" target=[State|EString] "for" event=[Event|EString] ("guard" guard=Expression)?
		public Group getGroup() { return cGroup; }

		//"from"
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }

		//source=[State|EString]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }

		//[State|EString]
		public CrossReference getSourceStateCrossReference_1_0() { return cSourceStateCrossReference_1_0; }

		//EString
		public RuleCall getSourceStateEStringParserRuleCall_1_0_1() { return cSourceStateEStringParserRuleCall_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//target=[State|EString]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//[State|EString]
		public CrossReference getTargetStateCrossReference_3_0() { return cTargetStateCrossReference_3_0; }

		//EString
		public RuleCall getTargetStateEStringParserRuleCall_3_0_1() { return cTargetStateEStringParserRuleCall_3_0_1; }

		//"for"
		public Keyword getForKeyword_4() { return cForKeyword_4; }

		//event=[Event|EString]
		public Assignment getEventAssignment_5() { return cEventAssignment_5; }

		//[Event|EString]
		public CrossReference getEventEventCrossReference_5_0() { return cEventEventCrossReference_5_0; }

		//EString
		public RuleCall getEventEventEStringParserRuleCall_5_0_1() { return cEventEventEStringParserRuleCall_5_0_1; }

		//("guard" guard=Expression)?
		public Group getGroup_6() { return cGroup_6; }

		//"guard"
		public Keyword getGuardKeyword_6_0() { return cGuardKeyword_6_0; }

		//guard=Expression
		public Assignment getGuardAssignment_6_1() { return cGuardAssignment_6_1; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_6_1_0() { return cGuardExpressionParserRuleCall_6_1_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Event:
		//	{Event} name=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{Event} name=STRING
		public Group getGroup() { return cGroup; }

		//{Event}
		public Action getEventAction_0() { return cEventAction_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVariableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVariableEStringParserRuleCall_0_0_1 = (RuleCall)cVariableVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionElementParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assignment:
		//	variable=[Variable|EString] ":=" expression=ExpressionElement;
		@Override public ParserRule getRule() { return rule; }

		//variable=[Variable|EString] ":=" expression=ExpressionElement
		public Group getGroup() { return cGroup; }

		//variable=[Variable|EString]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//[Variable|EString]
		public CrossReference getVariableVariableCrossReference_0_0() { return cVariableVariableCrossReference_0_0; }

		//EString
		public RuleCall getVariableVariableEStringParserRuleCall_0_0_1() { return cVariableVariableEStringParserRuleCall_0_0_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//expression=ExpressionElement
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//ExpressionElement
		public RuleCall getExpressionExpressionElementParserRuleCall_2_0() { return cExpressionExpressionElementParserRuleCall_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOperatorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorOperatorEnumRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword c_nameKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment c_nameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall c_nameEStringParserRuleCall_4_1_0 = (RuleCall)c_nameAssignment_4_1.eContents().get(0);
		private final Keyword cLeftKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLeftAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLeftExpressionElementParserRuleCall_6_0 = (RuleCall)cLeftAssignment_6.eContents().get(0);
		private final Keyword cRightKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cRightAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRightExpressionElementParserRuleCall_8_0 = (RuleCall)cRightAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Expression:
		//	"Expression" "{" "operator" operator=Operator ("_name" _name=EString)? "left" left=ExpressionElement "right"
		//	right=ExpressionElement "}";
		@Override public ParserRule getRule() { return rule; }

		//"Expression" "{" "operator" operator=Operator ("_name" _name=EString)? "left" left=ExpressionElement "right"
		//right=ExpressionElement "}"
		public Group getGroup() { return cGroup; }

		//"Expression"
		public Keyword getExpressionKeyword_0() { return cExpressionKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"operator"
		public Keyword getOperatorKeyword_2() { return cOperatorKeyword_2; }

		//operator=Operator
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_3_0() { return cOperatorOperatorEnumRuleCall_3_0; }

		//("_name" _name=EString)?
		public Group getGroup_4() { return cGroup_4; }

		//"_name"
		public Keyword get_nameKeyword_4_0() { return c_nameKeyword_4_0; }

		//_name=EString
		public Assignment get_nameAssignment_4_1() { return c_nameAssignment_4_1; }

		//EString
		public RuleCall get_nameEStringParserRuleCall_4_1_0() { return c_nameEStringParserRuleCall_4_1_0; }

		//"left"
		public Keyword getLeftKeyword_5() { return cLeftKeyword_5; }

		//left=ExpressionElement
		public Assignment getLeftAssignment_6() { return cLeftAssignment_6; }

		//ExpressionElement
		public RuleCall getLeftExpressionElementParserRuleCall_6_0() { return cLeftExpressionElementParserRuleCall_6_0; }

		//"right"
		public Keyword getRightKeyword_7() { return cRightKeyword_7; }

		//right=ExpressionElement
		public Assignment getRightAssignment_8() { return cRightAssignment_8; }

		//ExpressionElement
		public RuleCall getRightExpressionElementParserRuleCall_8_0() { return cRightExpressionElementParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class BooleanDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanData");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanData:
		//	value=EBoolean;
		@Override public ParserRule getRule() { return rule; }

		//value=EBoolean
		public Assignment getValueAssignment() { return cValueAssignment; }

		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_0() { return cValueEBooleanParserRuleCall_0; }
	}

	public class IntegerDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerData");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerData:
		//	value=EInt;
		@Override public ParserRule getRule() { return rule; }

		//value=EInt
		public Assignment getValueAssignment() { return cValueAssignment; }

		//EInt
		public RuleCall getValueEIntParserRuleCall_0() { return cValueEIntParserRuleCall_0; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableReferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword c_nameKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment c_nameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall c_nameEStringParserRuleCall_2_1_0 = (RuleCall)c_nameAssignment_2_1.eContents().get(0);
		private final Keyword cVariableKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cVariableVariableCrossReference_4_0 = (CrossReference)cVariableAssignment_4.eContents().get(0);
		private final RuleCall cVariableVariableEStringParserRuleCall_4_0_1 = (RuleCall)cVariableVariableCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//VariableReference:
		//	"VariableReference" "{" ("_name" _name=EString)? "variable" variable=[Variable|EString] "}";
		@Override public ParserRule getRule() { return rule; }

		//"VariableReference" "{" ("_name" _name=EString)? "variable" variable=[Variable|EString] "}"
		public Group getGroup() { return cGroup; }

		//"VariableReference"
		public Keyword getVariableReferenceKeyword_0() { return cVariableReferenceKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("_name" _name=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//"_name"
		public Keyword get_nameKeyword_2_0() { return c_nameKeyword_2_0; }

		//_name=EString
		public Assignment get_nameAssignment_2_1() { return c_nameAssignment_2_1; }

		//EString
		public RuleCall get_nameEStringParserRuleCall_2_1_0() { return c_nameEStringParserRuleCall_2_1_0; }

		//"variable"
		public Keyword getVariableKeyword_3() { return cVariableKeyword_3; }

		//variable=[Variable|EString]
		public Assignment getVariableAssignment_4() { return cVariableAssignment_4; }

		//[Variable|EString]
		public CrossReference getVariableVariableCrossReference_4_0() { return cVariableVariableCrossReference_4_0; }

		//EString
		public RuleCall getVariableVariableEStringParserRuleCall_4_0_1() { return cVariableVariableEStringParserRuleCall_4_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		@Override public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class CompositeState_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeState_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesStateParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDoKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperationOperationParserRuleCall_4_1_0 = (RuleCall)cOperationAssignment_4_1.eContents().get(0);
		private final Keyword cInitWithKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInitialStateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInitialStateInitialStateParserRuleCall_6_0 = (RuleCall)cInitialStateAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//CompositeState_Impl returns CompositeState:
		//	"state" name=EString "{" states+=State+ ("do" operation=Operation)? "init with" initialState=InitialState "}";
		@Override public ParserRule getRule() { return rule; }

		//"state" name=EString "{" states+=State+ ("do" operation=Operation)? "init with" initialState=InitialState "}"
		public Group getGroup() { return cGroup; }

		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//states+=State+
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }

		//State
		public RuleCall getStatesStateParserRuleCall_3_0() { return cStatesStateParserRuleCall_3_0; }

		//("do" operation=Operation)?
		public Group getGroup_4() { return cGroup_4; }

		//"do"
		public Keyword getDoKeyword_4_0() { return cDoKeyword_4_0; }

		//operation=Operation
		public Assignment getOperationAssignment_4_1() { return cOperationAssignment_4_1; }

		//Operation
		public RuleCall getOperationOperationParserRuleCall_4_1_0() { return cOperationOperationParserRuleCall_4_1_0; }

		//"init with"
		public Keyword getInitWithKeyword_5() { return cInitWithKeyword_5; }

		//initialState=InitialState
		public Assignment getInitialStateAssignment_6() { return cInitialStateAssignment_6; }

		//InitialState
		public RuleCall getInitialStateInitialStateParserRuleCall_6_0() { return cInitialStateInitialStateParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class BooleanVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBooleanKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueBooleanDataParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		
		//BooleanVariable:
		//	{BooleanVariable} name=EString ":" "boolean" (":=" value=BooleanData)?;
		@Override public ParserRule getRule() { return rule; }

		//{BooleanVariable} name=EString ":" "boolean" (":=" value=BooleanData)?
		public Group getGroup() { return cGroup; }

		//{BooleanVariable}
		public Action getBooleanVariableAction_0() { return cBooleanVariableAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"boolean"
		public Keyword getBooleanKeyword_3() { return cBooleanKeyword_3; }

		//(":=" value=BooleanData)?
		public Group getGroup_4() { return cGroup_4; }

		//":="
		public Keyword getColonEqualsSignKeyword_4_0() { return cColonEqualsSignKeyword_4_0; }

		//value=BooleanData
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//BooleanData
		public RuleCall getValueBooleanDataParserRuleCall_4_1_0() { return cValueBooleanDataParserRuleCall_4_1_0; }
	}

	public class IntegerVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIntegerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueIntegerDataParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		
		//IntegerVariable:
		//	{IntegerVariable} name=EString ":" "integer" (":=" value=IntegerData)?;
		@Override public ParserRule getRule() { return rule; }

		//{IntegerVariable} name=EString ":" "integer" (":=" value=IntegerData)?
		public Group getGroup() { return cGroup; }

		//{IntegerVariable}
		public Action getIntegerVariableAction_0() { return cIntegerVariableAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"integer"
		public Keyword getIntegerKeyword_3() { return cIntegerKeyword_3; }

		//(":=" value=IntegerData)?
		public Group getGroup_4() { return cGroup_4; }

		//":="
		public Keyword getColonEqualsSignKeyword_4_0() { return cColonEqualsSignKeyword_4_0; }

		//value=IntegerData
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//IntegerData
		public RuleCall getValueIntegerDataParserRuleCall_4_1_0() { return cValueIntegerDataParserRuleCall_4_1_0; }
	}
	
	
	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddAddKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSubEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSubSubKeyword_1_0 = (Keyword)cSubEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqEqKeyword_2_0 = (Keyword)cEqEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMulEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMulMulKeyword_3_0 = (Keyword)cMulEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGtEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGtGtKeyword_4_0 = (Keyword)cGtEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLtEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLtLtKeyword_5_0 = (Keyword)cLtEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLteEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLteLteKeyword_6_0 = (Keyword)cLteEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cGteEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cGteGteKeyword_7_0 = (Keyword)cGteEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cDivDivKeyword_8_0 = (Keyword)cDivEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cAndAndKeyword_9_0 = (Keyword)cAndEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cNeqEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cNeqNeqKeyword_10_0 = (Keyword)cNeqEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cOrOrKeyword_11_0 = (Keyword)cOrEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cNotEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cNotNotKeyword_12_0 = (Keyword)cNotEnumLiteralDeclaration_12.eContents().get(0);
		
		//enum Operator:
		//	add | sub | eq | mul | gt | lt | lte | gte | div | and | neq | or | not;
		public EnumRule getRule() { return rule; }

		//add | sub | eq | mul | gt | lt | lte | gte | div | and | neq | or | not
		public Alternatives getAlternatives() { return cAlternatives; }

		//add
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }

		//"add"
		public Keyword getAddAddKeyword_0_0() { return cAddAddKeyword_0_0; }

		//sub
		public EnumLiteralDeclaration getSubEnumLiteralDeclaration_1() { return cSubEnumLiteralDeclaration_1; }

		//"sub"
		public Keyword getSubSubKeyword_1_0() { return cSubSubKeyword_1_0; }

		//eq
		public EnumLiteralDeclaration getEqEnumLiteralDeclaration_2() { return cEqEnumLiteralDeclaration_2; }

		//"eq"
		public Keyword getEqEqKeyword_2_0() { return cEqEqKeyword_2_0; }

		//mul
		public EnumLiteralDeclaration getMulEnumLiteralDeclaration_3() { return cMulEnumLiteralDeclaration_3; }

		//"mul"
		public Keyword getMulMulKeyword_3_0() { return cMulMulKeyword_3_0; }

		//gt
		public EnumLiteralDeclaration getGtEnumLiteralDeclaration_4() { return cGtEnumLiteralDeclaration_4; }

		//"gt"
		public Keyword getGtGtKeyword_4_0() { return cGtGtKeyword_4_0; }

		//lt
		public EnumLiteralDeclaration getLtEnumLiteralDeclaration_5() { return cLtEnumLiteralDeclaration_5; }

		//"lt"
		public Keyword getLtLtKeyword_5_0() { return cLtLtKeyword_5_0; }

		//lte
		public EnumLiteralDeclaration getLteEnumLiteralDeclaration_6() { return cLteEnumLiteralDeclaration_6; }

		//"lte"
		public Keyword getLteLteKeyword_6_0() { return cLteLteKeyword_6_0; }

		//gte
		public EnumLiteralDeclaration getGteEnumLiteralDeclaration_7() { return cGteEnumLiteralDeclaration_7; }

		//"gte"
		public Keyword getGteGteKeyword_7_0() { return cGteGteKeyword_7_0; }

		//div
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_8() { return cDivEnumLiteralDeclaration_8; }

		//"div"
		public Keyword getDivDivKeyword_8_0() { return cDivDivKeyword_8_0; }

		//and
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_9() { return cAndEnumLiteralDeclaration_9; }

		//"and"
		public Keyword getAndAndKeyword_9_0() { return cAndAndKeyword_9_0; }

		//neq
		public EnumLiteralDeclaration getNeqEnumLiteralDeclaration_10() { return cNeqEnumLiteralDeclaration_10; }

		//"neq"
		public Keyword getNeqNeqKeyword_10_0() { return cNeqNeqKeyword_10_0; }

		//or
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_11() { return cOrEnumLiteralDeclaration_11; }

		//"or"
		public Keyword getOrOrKeyword_11_0() { return cOrOrKeyword_11_0; }

		//not
		public EnumLiteralDeclaration getNotEnumLiteralDeclaration_12() { return cNotEnumLiteralDeclaration_12; }

		//"not"
		public Keyword getNotNotKeyword_12_0() { return cNotNotKeyword_12_0; }
	}
	
	private final StateMachineElements pStateMachine;
	private final StateElements pState;
	private final VariableElements pVariable;
	private final ExpressionElementElements pExpressionElement;
	private final DataElements pData;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	private final OperationElements pOperation;
	private final State_ImplElements pState_Impl;
	private final InitialStateElements pInitialState;
	private final TransitionElements pTransition;
	private final EventElements pEvent;
	private final AssignmentElements pAssignment;
	private final ExpressionElements pExpression;
	private final BooleanDataElements pBooleanData;
	private final IntegerDataElements pIntegerData;
	private final VariableReferenceElements pVariableReference;
	private final OperatorElements unknownRuleOperator;
	private final EIntElements pEInt;
	private final CompositeState_ImplElements pCompositeState_Impl;
	private final BooleanVariableElements pBooleanVariable;
	private final IntegerVariableElements pIntegerVariable;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SMGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStateMachine = new StateMachineElements();
		this.pState = new StateElements();
		this.pVariable = new VariableElements();
		this.pExpressionElement = new ExpressionElementElements();
		this.pData = new DataElements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
		this.pOperation = new OperationElements();
		this.pState_Impl = new State_ImplElements();
		this.pInitialState = new InitialStateElements();
		this.pTransition = new TransitionElements();
		this.pEvent = new EventElements();
		this.pAssignment = new AssignmentElements();
		this.pExpression = new ExpressionElements();
		this.pBooleanData = new BooleanDataElements();
		this.pIntegerData = new IntegerDataElements();
		this.pVariableReference = new VariableReferenceElements();
		this.unknownRuleOperator = new OperatorElements();
		this.pEInt = new EIntElements();
		this.pCompositeState_Impl = new CompositeState_ImplElements();
		this.pBooleanVariable = new BooleanVariableElements();
		this.pIntegerVariable = new IntegerVariableElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.StateMachine.sm.SM".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StateMachine:
	//	"StateMachine" name=EString "{" variables+=Variable* "events" "{" events+=Event ("," events+=Event)* "}"
	//	states+=State+ "init with" initialState=InitialState transitions+=Transition+ / *('operation' operation=Operation)?
	//		'states' '{' states+=State ( "," states+=State)* '}' 
	//		'initialState' initialState=InitialState
	//		'transitions' '{' transitions+=Transition ( "," transitions+=Transition)* '}' 
	//		'events' '{' events+=Event ( "," events+=Event)* '}' 
	//		('variables' '{' variables+=Variable ( "," variables+=Variable)* '}' )?* / "}";
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}

	//State:
	//	State_Impl | StateMachine | CompositeState_Impl;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Variable:
	//	"var" (BooleanVariable | IntegerVariable);
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//ExpressionElement:
	//	Expression | BooleanData | IntegerData | VariableReference;
	public ExpressionElementElements getExpressionElementAccess() {
		return pExpressionElement;
	}
	
	public ParserRule getExpressionElementRule() {
		return getExpressionElementAccess().getRule();
	}

	//Data:
	//	BooleanData | IntegerData;
	public DataElements getDataAccess() {
		return pData;
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//Operation:
	//	{Operation} ("{" contents+=Assignment (";" contents+=Assignment)* "}")?;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//State_Impl returns State:
	//	"state" name=EString "{" ("do" operation=Operation)? "}";
	public State_ImplElements getState_ImplAccess() {
		return pState_Impl;
	}
	
	public ParserRule getState_ImplRule() {
		return getState_ImplAccess().getRule();
	}

	//InitialState:
	//	referencedState=[State|EString];
	public InitialStateElements getInitialStateAccess() {
		return pInitialState;
	}
	
	public ParserRule getInitialStateRule() {
		return getInitialStateAccess().getRule();
	}

	//Transition:
	//	"from" source=[State|EString] "to" target=[State|EString] "for" event=[Event|EString] ("guard" guard=Expression)?;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//Event:
	//	{Event} name=STRING;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Assignment:
	//	variable=[Variable|EString] ":=" expression=ExpressionElement;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Expression:
	//	"Expression" "{" "operator" operator=Operator ("_name" _name=EString)? "left" left=ExpressionElement "right"
	//	right=ExpressionElement "}";
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//BooleanData:
	//	value=EBoolean;
	public BooleanDataElements getBooleanDataAccess() {
		return pBooleanData;
	}
	
	public ParserRule getBooleanDataRule() {
		return getBooleanDataAccess().getRule();
	}

	//IntegerData:
	//	value=EInt;
	public IntegerDataElements getIntegerDataAccess() {
		return pIntegerData;
	}
	
	public ParserRule getIntegerDataRule() {
		return getIntegerDataAccess().getRule();
	}

	//VariableReference:
	//	"VariableReference" "{" ("_name" _name=EString)? "variable" variable=[Variable|EString] "}";
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//enum Operator:
	//	add | sub | eq | mul | gt | lt | lte | gte | div | and | neq | or | not;
	public OperatorElements getOperatorAccess() {
		return unknownRuleOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//CompositeState_Impl returns CompositeState:
	//	"state" name=EString "{" states+=State+ ("do" operation=Operation)? "init with" initialState=InitialState "}";
	public CompositeState_ImplElements getCompositeState_ImplAccess() {
		return pCompositeState_Impl;
	}
	
	public ParserRule getCompositeState_ImplRule() {
		return getCompositeState_ImplAccess().getRule();
	}

	//BooleanVariable:
	//	{BooleanVariable} name=EString ":" "boolean" (":=" value=BooleanData)?;
	public BooleanVariableElements getBooleanVariableAccess() {
		return pBooleanVariable;
	}
	
	public ParserRule getBooleanVariableRule() {
		return getBooleanVariableAccess().getRule();
	}

	//IntegerVariable:
	//	{IntegerVariable} name=EString ":" "integer" (":=" value=IntegerData)?;
	public IntegerVariableElements getIntegerVariableAccess() {
		return pIntegerVariable;
	}
	
	public ParserRule getIntegerVariableRule() {
		return getIntegerVariableAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
